# Default values for akeyless-zero-trust-web-access.

# Optional, completely replaces the generated name of the chart in the Chart.yaml file, and chart release name.
fullnameOverride:

image:
  dockerRepositoryCreds:


# Linux system HTTP Proxy
httpProxySettings:
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""

deployment:
  labels: {}

validator:
  # Validator is enabled by default, and will run on helm chart installation.
  # If Validator set to false, policies validation will still run on the web-worker deployment, with the validator as init-container.
  enabled: true
  image:
    repository: apteno/alpine-jq
    pullPolicy: IfNotPresent
    tag: 2021-04-04
  annotations: {}
  # Remove the {} and add any needed annotations regarding your pod sidecar implementation
  # For Example when using istio sidecar to avoid issues with validator job completion please add the following annotation:
  #  annotations:
  #    sidecar.istio.io/inject: "false"


dispatcher:
  replicaCount: 1
  initContainer:
    image:
      repository: busybox
      tag: 1.30.1
      pullPolicy: IfNotPresent
  image:
    repository: akeyless/zero-trust-web-dispatcher
    pullPolicy: Always
#    tag: latest

  containerName: "web-dispatcher"

  ## Configure the ingress resource that allows you to access the
  ## akeyless-zero-trust-web-access installation. Set up the URL
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    ## Set to true to enable ingress record generation
    ##
    enabled: false

    annotations: {}
    labels: {}
# Example for Nginx ingress
#    annotations:
#      kubernetes.io/ingress.class: nginx
#      kubernetes.io/proxy-connect-timeout: "4000"
#      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
#      nginx.ingress.kubernetes.io/proxy-buffers-number: "4"

    hostname: aztwa.local
    ## Path for the default host
    ##
    path: /

    ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
    ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
    ## or a custom one if you use the tls.existingSecret parameter
    ##
    tls: false

    ## Set this to true in order to add the corresponding annotations for cert-manager
    ##
    certManager: false

    ## existingSecret: name-of-existing-secret

  service:
    # Remove the {} and add any needed annotations regarding your LoadBalancer implementation
    annotations: {}
    labels: {}
    type: LoadBalancer
    port: 9000
    proxyPort: 19414

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#     limits:
#       memory: 1Gi
#     requests:
#       cpu: 1000m
#       memory: 1Gi

  livenessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 10
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 3
    periodSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  env: []

  config:
    # a full URL of Akeyless API Gateway
    apiGatewayURL: https://rest.akeyless.io
    apiGatewayCert:
  #  Specifies an existing secret for gateway tls certificate must include:
  # - tls.crt
      tlsCertsSecretName:

    # Secure remote access cluster name. Use a name that will help you understand
    # the purpose of this cluster, for example, "sra-staging" or "us-west-prod"
    clusterName: defaultCluster

    # For the Zero-Trust Web Access, it's recommended to grant minimal permissions ("List" only) to the Zero-Trust client,
    # while the privilegedAccess will have "Read" and "List" permissions.
    listOnlyCredentials:
      samlAccessID: ""

    # List of URLs that will be considered valid for redirection from the Portal back to the bastion
    allowedBastionUrls: []
      # - "https://bastion.my.org:8888"
      # - "https://basion.other.org:8888"

    # List of URLs that will be considered valid for redirection from the Portal back to the web proxy service
    allowedProxyUrls: []
    # - "https://bastion.my.org:19414"
    # - "https://basion.other.org:19414"

    # The privilegedAccess should have "Read" and "List" permissions to the relevant secrets.
    # If accessKey field is left empty, the accessID will be used as a Cloud Provider IAM Auth Method (e.g. AWS-IAM, AzureAD, GCP-GCE)
    privilegedAccess:


      existingSecretNames:
        ## access secret content should look like this:
        # accessID: p-1234
        # accessKey: mySecretKey
        # * accessKey can be left empty, but the key must exist
        access:
        ## allowedIDs secret content should like this
        # allowedAccessIDs: p-1234,11245,p-1256
        allowedIDs:

      accessID: ""
      accessKey: ""

      # Restrict Zero-Trust Web Access to the following list of clients Access-IDs (saml)
      # if left empty, any Access-ID will be accepted (still required to have "List" permission on the relevant secret names)
      allowedAccessIDs: []
      # - p-1234
      # - p-5678
      # - p-5678

   # When false, only requests with preemptive JWT auth will be accepted
    allowedInternalAuth: "false"
   # When false, dispatcher session cookie can be send only on top off encrypted requests (HTTPS)
    disableSecureCookie: "true"

    # existingLogForwardSecretName will hold the configuration for dispatcher log forward
    # The data structure in secret should be like so:
    ## logand.conf: | ## make sure to keep logand.conf as the key!
    #    target_log_type="splunk"
    #    target_splunk_sourcetype=""
    #    target_splunk_source=""
    #    target_splunk_index=""
    #    target_splunk_token=""
    #    target_splunk_url=""
    existingLogForwardSecretName:
    logForward:
#    # audit configuration for log forwarding, currently support several technologies: https://docs.akeyless.io/docs/ssh-log-forwarding
#    #splunk example
#    logForward: |
#      target_log_type="splunk"
#      target_splunk_sourcetype=""
#      target_splunk_source=""
#      target_splunk_index=""
#      target_splunk_token=""
#      target_splunk_url=""

webWorker:
  replicaCount: 5
  initContainer:
    image:
      repository: apteno/alpine-jq
      tag: 2021-04-04
      pullPolicy: IfNotPresent
  image:
    repository: akeyless/zero-trust-web-worker
    pullPolicy: Always
#    tag: latest

  containerName: "web-worker"

  service:
    # Remove the {} and add any needed annotations regarding your LoadBalancer implementation
    annotations: {}
    labels: {}

    port: 5800

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#     limits:
#       memory: 1Gi
#     requests:
#       cpu: 1000m
#       memory: 1Gi

  livenessProbe:
    successThreshold: 1

  env: []

  config:
    displayWidth: 2560
    displayHeight: 1200

    policies: |
        {
          "policies": {
            "BlockAboutConfig": true,
            "BlockAboutAddons": true,
            "BlockAboutProfiles": true,
            "BlockAboutSupport": true,
            "DisableDeveloperTools": true,
            "DisableFirefoxAccounts": true,
            "DisablePasswordReveal": true,
            "DisablePrivateBrowsing": true,
            "DisableProfileImport": true,
            "DisableSafeMode": true,
            "OfferToSaveLogins": false,
            "OfferToSaveLoginsDefault": false,
            "PasswordManagerEnabled": false,
            "Proxy": {
              "Mode": "none",
              "Locked": true
            },
            "Preferences": {},
            "WebsiteFilter": {
              "Block": [
                "<all_urls>"
              ],
              "Exceptions": [
                "https://*.akeyless.io/*"
              ]
            }
          }
        }

dlp:
  enabled: false
  config:
    hostAddress: ""
    # host/{pathPrefix}
    pathPrefix: ""
    # FORCING or LEARNING
    mode: ""
    logLevel: "INFO"

# existingLogForwardSecretName will hold the configuration for dlp log forward
# The data structure in secret should be like so:
#  logand.conf: | ## make sure to keep logand.conf as the key!
#    target_log_type="splunk"
#    target_splunk_sourcetype=""
#    target_splunk_source=""
#    target_splunk_index=""
#    target_splunk_token=""
#    target_splunk_url=""

  existingLogForwardSecretName:
  audit:
# audit configuration for log forwarding, currently support several technologies: https://docs.akeyless.io/docs/ssh-log-forwarding
#splunk example
#  audit: |
#    target_log_type="splunk"
#    target_splunk_sourcetype=""
#    target_splunk_source=""
#    target_splunk_index=""
#    target_splunk_token=""
#    target_splunk_url=""


# To be able to download files to your local machine, the helm chart requires a storage class with ReadWriteMany access modes.
# Since a storage class is more environment specific, you will need to provide one before proceeding.
# For security reason, please limit the PersistentVolumes mount permissions to `0650`, example:
#  ```mountOptions:
#       - dir_mode=0650
#       - file_mode=0650
#  ```
# Azure example:
# persistence:
  #  shareStorageVolume:
  #    name: share-storage
  #    storageClassName: ""
  #    accessModes:
  #      - ReadWriteMany
  #    annotations:
  #      volume.beta.kubernetes.io/storage-class: ""
  #    size: 2Gi
  #    matchLabels:
  #      usage: fileshare-pv
#
persistence: {}
#  shareStorageVolume:
#    name: share-storage
#    storageClassName:
#    accessModes:
#      - ReadWriteMany
#    annotations: {}
#    size: 2Gi
#    matchLabels:


HPA:
  # Set the below to false in case you do not want to add Horizontal Pod AutoScaling (not recommended)
  enabled: false
  dispatcher:
    minReplicas: 1
    maxReplicas: 14
    cpuAvgUtil: 50
    memAvgUtil: 50
  # Will only work with metrics enabled
  webWorker:
    busyWorkersPercentage: 50
  # HPA can potentially terminate (scale down) a pod with a live session. This value is the time period to postpone the termination
    sessionTerminationGracePeriodSeconds: 3600

metrics:
  enabled: false
  podAnnotation: false
  serviceMonitor:
  # When service monitor is off, we assume that the installed prometheus support pod annotation-based discovery of services
    enabled: false
#    namespace: monitoring
    interval: "15s"
#    scrapeTimeout:

    # MANDATORY!
    # Prometheus discovers ServiceMonitors that are labeled with the same release tag as the prometheus-operator release
#    releaseLabels:
#      release: prometheus-stack

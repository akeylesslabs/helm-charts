apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-worker-deployment
  namespace: {{ .Release.Namespace }}
  labels:
        {{- include "akeyless-zero-web-access.labels" . | nindent 4 }}
      {{- if .Values.deployment.labels }}
        {{- toYaml .Values.deployment.labels | nindent 4 }}
      {{- end }}
spec:
  selector:
    matchLabels:
      app: web-worker
  {{- if not .Values.HPA.enabled }}
  replicas: {{ .Values.webWorker.replicaCount }}
  {{- end }}
  template:
    metadata:
      labels:
        app: web-worker
    spec:
      securityContext:
        fsGroup: 10000
      volumes:
        - name: config
          emptyDir: {}
{{- if .Values.dispatcher.config.apiGatewayCert.tlsCertsSecretName }}
        - name: gw-signed-ca
          secret:
            secretName: {{ .Values.dispatcher.config.apiGatewayCert.tlsCertsSecretName }}
            items:
              - key: tls.crt
                path: gw-cert.pem
{{- end }}
        - name: configmap-policies
          configMap:
            name: {{ $.Release.Name }}-cm-web-policies
{{- if .Values.dlp.enabled }}
        - name: configmap-conf
          {{- if $.Values.dlp.existingLogForwardSecretName }}
          secret:
            secretName: "{{ $.Values.dlp.existingLogForwardSecretName }}"
          {{- else }}
          configMap:
            name: {{ $.Release.Name }}-cm-dlp-conf
          {{- end }}
{{- end }}
        - name: dshm
          emptyDir:
            medium: Memory
        {{ if and .Values.persistence .Values.persistence.shareStorageVolume }}
        - name: {{ .Values.persistence.shareStorageVolume.name | title | lower }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s" $.Release.Name .Values.persistence.shareStorageVolume.name | title | lower }}
        {{ end }}
      initContainers:
        # Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
        # the file must be mounted as read-write. We use init containers to copy from the config map read-only
        # path, to a read-write path
        - name: bootstrap
          image: "{{ .Values.webWorker.initContainer.image.repository }}:{{ .Values.webWorker.initContainer.image.tag }}"
          imagePullPolicy: {{ .Values.webWorker.initContainer.image.pullPolicy }}
          command: ["/bin/sh"]
          args:
            - "-c"
            - |
              set -ex
              [ "$(ls /configmap_conf)" ] && cp /configmap_conf/* /var/akeyless/conf
              [ "$(ls /configmap_policy_conf)" ] && cp /configmap_policy_conf/* /var/akeyless/policy_conf
              jq -e . /var/akeyless/policy_conf || (echo "Policies JSON validation failed! please correct the policies JSON structure in the values.yaml file" && exit 1)
          volumeMounts:
{{- if .Values.dlp.enabled }}
            - name: configmap-conf
              mountPath: /configmap_conf
{{- end }}
            - name: config
              mountPath: /var/akeyless/conf
            - name: configmap-policies
              mountPath: /configmap_policy_conf
{{- if .Values.dispatcher.config.apiGatewayCert.tlsCertsSecretName }}
            - name: gw-signed-ca
              mountPath: "/etc/ssl/certs/gw-cert.pem"
              subPath: gw-cert.pem
{{- end }}
      imagePullSecrets:
        - name: akeyless-docker-hub-web-access
      terminationGracePeriodSeconds: {{ .Values.HPA.webWorker.sessionTerminationGracePeriodSeconds | default 3600 }}
      containers:
        - name: {{ .Values.webWorker.containerName }}
          image: "{{ .Values.webWorker.image.repository }}:{{ .Values.webWorker.image.tag  | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.webWorker.image.pullPolicy }}
          ports:
            - containerPort: 5800
              name: web
            - containerPort: 9090
              name: agent
          env:
            - name: WEB_DISPATCHER_SERVICE_DNS
              value: {{ include "akeyless-zero-web-access.fullname" . }}-disc-disp
            - name: FF_PREF_HOMEPAGE
              value: browser.startup.homepage=\"https://www.akeyless.io\"
            - name: DES_DOWNLOAD_PATH
              value: /etc/shared/download
{{- if .Values.httpProxySettings.http_proxy }}
            - name: HTTP_PROXY
              value: {{ .Values.httpProxySettings.http_proxy }}
            - name: http_proxy
              value: {{ .Values.httpProxySettings.http_proxy }}
{{- end }}
{{- if .Values.httpProxySettings.https_proxy }}
            - name: HTTPS_PROXY
              value: {{ .Values.httpProxySettings.https_proxy }}
            - name: https_proxy
              value: {{ .Values.httpProxySettings.https_proxy }}
{{- end }}
{{- if .Values.httpProxySettings.no_proxy }}
            - name: NO_PROXY
              value: {{ .Values.httpProxySettings.no_proxy }}
            - name: no_proxy
              value: {{ .Values.httpProxySettings.no_proxy }}
{{- end }}
          {{- if .Values.webWorker.config.displayWidth }}
            - name: DISPLAY_WIDTH
              value: {{ .Values.webWorker.config.displayWidth | quote }}
          {{- end }}
          {{- if .Values.webWorker.config.displayHeight }}
            - name: DISPLAY_HEIGHT
              value: {{ .Values.webWorker.config.displayHeight | quote }}
          {{- end }}
{{- if .Values.webWorker.env }}
          {{- toYaml .Values.webWorker.env | nindent 12 }}
{{- end }}
          volumeMounts:
          - name: dshm
            mountPath: /dev/shm
          - name: configmap-policies
            mountPath: /usr/lib/firefox/distribution
          - name: config
            mountPath: /var/akeyless/conf
          {{ if and .Values.persistence .Values.persistence.shareStorageVolume }}
          - name: {{ .Values.persistence.shareStorageVolume.name | title | lower }}
            mountPath: /etc/shared
          {{ end }}
{{- if .Values.dispatcher.config.apiGatewayCert.tlsCertsSecretName }}
          - name: gw-signed-ca
            mountPath: "/etc/ssl/certs/gw-cert.pem"
            subPath: gw-cert.pem
{{- end }}
          resources:
{{- toYaml .Values.webWorker.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /healthy
              port: agent
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
{{- toYaml .Values.webWorker.livenessProbe | trim | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh", "-c", "/var/akeyless/scripts/safe_shutdown.sh" ]
{{/* RBAC rule to access the secret if enableScaleOutOnDisconnectedMode is true and clusterCacheEncryptionKeyExist is not empty */}}
{{- if and (eq .Values.globalConfig.clusterCache.enableScaleOutOnDisconnectedMode true | default false) (not (.Values.globalConfig.clusterCache.encryptionKeyExistingSecret)) }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ template "akeyless-gateway.getServiceAccountName" $ }}-secret-access
  namespace: {{ $.Release.Namespace | quote }}
rules:
  # Rule to allow creating any secret (Refer - https://github.com/kubernetes/kubernetes/issues/80295)
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]

  # Rule to allow getting and updating a specific secret
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: [{{ include "akeyless-gateway.clusterCacheEncryptionKeyExist" $ | quote }}]
    verbs: ["get", "update"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "akeyless-gateway.getServiceAccountName" $ }}-secret-access-binding
  namespace: {{ $.Release.Namespace | quote }}
subjects:
  - kind: ServiceAccount
    name: {{ template "akeyless-gateway.getServiceAccountName" $ }}
    namespace: {{ $.Release.Namespace | quote }}
roleRef:
  kind: Role
  name: {{ template "akeyless-gateway.getServiceAccountName" $ }}-secret-access
  apiGroup: rbac.authorization.k8s.io
{{- end }}
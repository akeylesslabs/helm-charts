{{- if and (eq "true" (include "akeyless-gateway.clusterCache.enabled" . )) (not .Values.cacheHA.enabled) }}
{{- $deploymentName := printf "%s-cache" (include "akeyless-gateway.fullname" .) }}
{{- $mountCertPaths := (include "akeyless-gateway.clusterCache.tlsVolumeMountPath" .) -}}
{{- $tlsCertKeyPath := printf "%s/tls.key" $mountCertPaths }}
{{- $tlsCACertPath := printf "%s/ca.crt" $mountCertPaths }}
{{- $tlsCertPath := printf "%s/tls.crt" $mountCertPaths }}
{{- $tlsArgs :=  ternary (printf "--tls --cacert %s --cert %s --key %s " $tlsCACertPath $tlsCertPath $tlsCertKeyPath) "" (eq "true" (include "akeyless-gateway.clusterCache.enableTls" . )) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
{{- include "akeyless-gateway.clusterCache.labels" . | nindent 4 }}
{{- include "akeyless-gateway.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "akeyless-gateway.clusterCache.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "akeyless-gateway.clusterCache.labels" . | nindent 8 }}
    spec:
      {{- if (eq "true" (include "akeyless-gateway.clusterCache.enableTls" . )) }}
      volumes:
      {{- include "akeyless-gateway.clusterCache.tlsVolume" . | nindent 6 }}
      {{- end }}
      {{- include "cache.imagePullSecrets" . | indent 2 }}
      {{- if .Values.gateway.deployment.tolerations }}
      tolerations:
        {{- toYaml .Values.gateway.deployment.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.gateway.deployment.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.gateway.deployment.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.gateway.deployment.affinity.enabled }}
      affinity:
        {{- toYaml .Values.gateway.deployment.affinity.data | nindent 8 }}
      {{- if .Values.gateway.deployment.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml .Values.gateway.deployment.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ $deploymentName }}
          {{- include "akeyless-gateway.clusterCacheImage" . | nindent 10 }}
          {{- if .Values.gateway.deployment.containerSecurityContext }}
          securityContext:
            {{- toYaml .Values.gateway.deployment.containerSecurityContext | nindent 12 }}
          {{- end }}
          args:
          - redis-server
          - --requirepass
          - $(REDIS_PASSWORD)
          - --rename-command
          - FLUSHDB
          - ""
          - --rename-command
          - FLUSHALL
          - ""
          - --maxmemory
          - {{ include "akeyless-gateway.redisMaxmemory" . | quote }}
          - --maxmemory-policy
          - allkeys-lru
          {{- if (eq "true" (include "akeyless-gateway.clusterCache.enableTls" . )) }}
          - --port
          - "0"
          - --tls-port
          - "6379"
          - --tls-auth-clients
          - "yes"
          - --tls-cert-file
          - {{ $tlsCertPath }}
          - --tls-key-file
          - {{ $tlsCertKeyPath }}
          - --tls-ca-cert-file
          - {{ $tlsCACertPath }}
          {{- else }}
          - --port
          - "6379"
          {{- end }}
          ports:
            - containerPort: 6379
              name: cache
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  set_response=$(
                    redis-cli {{ $tlsArgs }} -a "$REDIS_PASSWORD" --no-auth-warning set liveness_test_key "SUCCESS"
                  )
                  response=$(
                    redis-cli {{ $tlsArgs }} -a "$REDIS_PASSWORD" --no-auth-warning get liveness_test_key
                  )
                  del_response=$(
                    redis-cli {{ $tlsArgs }} -a "$REDIS_PASSWORD" --no-auth-warning del liveness_test_key
                  )
                  if [ "$response" != "SUCCESS" ] ; then
                    echo "Unable to get keys, something is wrong"
                    echo "$response"
                    exit 1
                  fi
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  response=$(
                    redis-cli {{ $tlsArgs }} -a "$REDIS_PASSWORD" --no-auth-warning ping
                  )
                  if [ "$response" != "PONG" ] ; then
                      echo "Unable to get keys, something is wrong"
                      echo "$response"
                      exit 1
                  fi
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
          {{- toYaml .Values.globalConfig.clusterCache.resources | nindent 12 }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "akeyless-gateway.clusterCache.secretName" . }}
                  key: cache-pass
          {{- if (eq "true" (include "akeyless-gateway.clusterCache.enableTls" . )) }}
          volumeMounts:
            {{- include "akeyless-gateway.clusterCache.tlsVolumeMounts" . | nindent 12 -}}
          {{- end }}
{{- end }}

{{- if .Values.globalConfig.gatewayAuth.gatewayAccessId }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-conf-secret
type: Opaque
data:
{{- if .Values.globalConfig.gatewayAuth.gatewayAccessId }}
  gateway-access-id: {{ .Values.globalConfig.gatewayAuth.gatewayAccessId | b64enc | quote }}
{{- end }}
{{- if .Values.globalConfig.allowedAccessPermissions }}
  allowed-access-permissions: {{ .Values.globalConfig.allowedAccessPermissions | toJson | b64enc | quote  }}
{{- end }}
{{- end  }}

---
{{- if and (eq "true" (include "akeyless-gateway.clusterCache.enabled" .)) (empty .Values.globalConfig.clusterCache.cachePasswordExistingSecret) }}
{{- $cacheSecretName := printf "%s-cache-secret" .Release.Name }}
{{- $cacheSecretKey := "cache-pass" }}
{{- if .Values.cacheHA.enabled }}
{{- $cacheSecretName = (tpl .Values.cacheHA.existingSecret .) }}
{{- $cacheSecretKey = .Values.cacheHA.authKey }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $cacheSecretName }}
type: Opaque
data:
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $cacheSecretName) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $cachePassSecret to existing secret data or generate a random one when not exists
  {{- $cachePassSecret := (get $secretData $cacheSecretKey) | default (randAlphaNum 32 | b64enc) }}
  {{ $cacheSecretKey }}: {{ $cachePassSecret | quote }}
{{- end }}

---
{{- if (eq "true" (include "akeyless-gateway.clusterCache.enableTls" .)) }}
{{- $validityDays := .Values.clusterCache.certValidityDays | int }}
{{- $ca := genCA "cache-ca" $validityDays }}
{{- $fullname := (include "akeyless-gateway.clusterCache.SvcName" .) }}
{{- $tlsSecretName := (include "akeyless-gateway.clusterCache.generatedCacheTlsSecretName" .) }}
{{- if .Values.cacheHA.enabled }}
{{- $fullname = (include "redis-ha.fullname" .Subcharts.cacheHA) }}
{{- $tlsSecretName = (tpl .Values.cacheHA.tls.secretName .) }}
{{- $validityDays = .Values.cacheHA.tls.certValidityDays | int }}
{{- end }}
{{- $altNames := list
  (printf "%s.%s.svc.cluster.local" $fullname .Release.Namespace)
  (printf "*.%s.%s.svc.cluster.local" $fullname .Release.Namespace)
  (printf "%s.%s.svc" $fullname .Release.Namespace)
  (printf "*.%s.%s.svc" $fullname .Release.Namespace)
  (printf "%s.%s" $fullname .Release.Namespace)
  (printf "*.%s.%s" $fullname .Release.Namespace)
  (printf "*.%s.svc.cluster.local" .Release.Namespace)
  (printf "*.%s.svc" .Release.Namespace)
  (printf "*.%s" .Release.Namespace)
  "127.0.0.1"
  "localhost"
  $fullname
}}
{{- if .Values.cacheHA.enabled }}
  {{- range $i := until (.Values.cacheHA.replicas | int) }}
    {{- $altNames = append $altNames (printf "%s-announce-%d.%s.svc.cluster.local" $fullname $i $.Release.Namespace) }}
    {{- $altNames = append $altNames (printf "%s-announce-%d.%s.svc" $fullname $i $.Release.Namespace) }}
    {{- $altNames = append $altNames (printf "%s-announce-%d.%s" $fullname $i $.Release.Namespace) }}
  {{- end }}
{{- end }}
{{- $cert := genSignedCert $fullname nil $altNames $validityDays $ca }}
{{- $tlsExistingSecret := (lookup "v1" "Secret" .Release.Namespace $tlsSecretName).data }}
{{- $certFile := .Values.cacheHA.tls.certFile }}
{{- $keyFile := .Values.cacheHA.tls.keyFile }}
{{- $caCertFile := .Values.cacheHA.tls.caCertFile }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $tlsSecretName }}
type: kubernetes.io/tls
data:
  {{ $certFile }}: {{ get $tlsExistingSecret $certFile | default ($cert.Cert | b64enc) }}
  {{ $keyFile }}: {{ get $tlsExistingSecret $keyFile | default ($cert.Key | b64enc) }}
  {{ $caCertFile }}: {{ get $tlsExistingSecret $caCertFile | default ($ca.Cert | b64enc) }}
{{- end }}

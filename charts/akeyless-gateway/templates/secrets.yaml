{{- if .Values.globalConfig.gatewayAuth.gatewayAccessId }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-conf-secret
type: Opaque
data:
{{- if .Values.globalConfig.gatewayAuth.gatewayAccessId }}
  gateway-access-id: {{ .Values.globalConfig.gatewayAuth.gatewayAccessId | b64enc | quote }}
{{- end }}
{{- if .Values.globalConfig.allowedAccessPermissions }}
  allowed-access-permissions: {{ .Values.globalConfig.allowedAccessPermissions | toJson | b64enc | quote  }}
{{- end }}
{{- end  }}

---
{{- $cacheHa := index .Values "cacheHA" -}}
{{- if and (eq "true" (include "akeyless-gateway.clusterCache.enabled" . )) (empty .Values.globalConfig.clusterCache.cachePasswordExistingSecret ) (not $cacheHa.enabled) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-cache-secret
type: Opaque
data:
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-cache-secret" $.Release.Name) ) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $cachePassSecret to existing secret data or generate a random one when not exists
  {{- $cachePassSecret := (get $secretData "cache-pass") | default (randAlphaNum 32 | b64enc) }}
  cache-pass: {{ $cachePassSecret | quote }}
{{- end }}

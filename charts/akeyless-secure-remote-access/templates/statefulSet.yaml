{{- if eq .Values.sshConfig.enabled true }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ssh-{{ include "akeyless-secure-remote-access.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "akeyless-secure-remote-access.labels" . | nindent 4 }}
  {{- if .Values.sshConfig.labels }}
    {{- toYaml .Values.sshConfig.labels | nindent 4 }}
  {{- end }}
spec:
  serviceName: {{ include "akeyless-secure-remote-access.fullname" . }}
  replicas: {{ .Values.sshConfig.replicaCount }}
  updateStrategy:
    type: {{ .Values.sshConfig.updateStrategy }}
  selector:
    matchLabels:
      app: ssh-bastion
  template:
    metadata:
      labels:
        app: ssh-bastion
    spec:
      {{- if .Values.sshConfig.securityContext }}
        {{- if .Values.sshConfig.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.sshConfig.securityContext.runAsUser }}
        fsGroup: {{ .Values.sshConfig.securityContext.fsGroup }}
        {{- end }}
      {{- end }}
      serviceAccountName: {{ template "akeyless-api-gw.getServiceAccountName" . }}
      {{- if .Values.sshConfig.nodeSelector }}
      nodeSelector:
      {{ toYaml .Values.sshConfig.nodeSelector | indent 4 }}
      {{- end }}
      volumes:
      - name: config
        emptyDir: {}
      - name: creds
        emptyDir: {}
{{- if .Values.apiGatewayCert.tlsCertsSecretName }}
      - name: gw-signed-ca
        secret:
          secretName: {{ .Values.apiGatewayCert.tlsCertsSecretName }}
          items:
            - key: tls.crt
              path: gw-cert.pem
{{- end }}
      - name: ssh
      {{- range .Values.sshConfig.persistence.volumes }}
      - name: {{ .name | title | lower }}
        persistentVolumeClaim:
          claimName: {{ printf "%s-%s" $.Release.Name .name | title | lower }}
      {{- end }}
      - name: configmap-creds
        configMap:
          name: {{ $.Release.Name }}-cm-creds
      - name: configmap-conf
        configMap:
          name: {{ $.Release.Name }}-cm-conf
      initContainers:
        # Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
        # the file must be mounted as read-write. We use init containers to copy from the config map read-only
        # path, to a read-write path
        - name: bootstrap
          image: "{{ .Values.sshConfig.initContainer.image.repository }}:{{ .Values.sshConfig.initContainer.image.tag }}"
          imagePullPolicy: {{ .Values.sshConfig.initContainer.image.pullPolicy }}
          {{- if (or (eq (include "secret-exist" (dict "Root" $.Values.privilegedAccess.existingSecretNames "Name" "access")) "true") (.Values.sshConfig.config.logForwarding.existingSecretName))}}
          env:
          {{- if (eq (include "secret-exist" (dict "Root" $.Values.privilegedAccess.existingSecretNames "Name" "access")) "true") }}
            - name: accessID
              valueFrom:
                secretKeyRef:
                  name: {{.Values.privilegedAccess.existingSecretNames.access }}
                  key: accessID
            - name: accessKey
              valueFrom:
                secretKeyRef:
                  name: {{.Values.privilegedAccess.existingSecretNames.access }}
                  key: accessKey
          {{- end }}
          {{- if .Values.sshConfig.config.logForwarding.existingSecretName }}
            - name: config
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sshConfig.config.logForwarding.existingSecretName }}
                  key: settings
          {{- end }}
          {{- end }}

          command: ['sh']
          args:
            - "-c"
            - |
              set -ex
              {{- if (eq (include "secret-exist" (dict "Root" $.Values.privilegedAccess.existingSecretNames "Name" "access")) "true") }}
              echo {{ required "API Gateway URL is required" .Values.apiGatewayURL }} > /var/akeyless/conf/akeyless_config_file
              echo "cmd=auth&access-id=$accessID&access-key=$accessKey" >> /var/akeyless/conf/akeyless_config_file
              {{- end }}
              {{- if .Values.sshConfig.config.logForwarding.existingSecretName }}
              echo -e "$config" > /var/akeyless/conf/logand.conf
              {{- end }}
              [ "$(ls /configmap_conf)" ] && cp -u /configmap_conf/* /var/akeyless/conf
              [ "$(ls /configmap_creds)" ] && cp /configmap_creds/* /var/akeyless/creds
          volumeMounts:
            - name: configmap-conf
              mountPath: /configmap_conf
            - name: configmap-creds
              mountPath: /configmap_creds
            - name: config
              mountPath: /var/akeyless/conf
            - name: creds
              mountPath: /var/akeyless/creds
{{- if .Values.apiGatewayCert.tlsCertsSecretName }}
            - name: gw-signed-ca
              mountPath: "/etc/ssl/certs/gw-cert.pem"
              subPath: gw-cert.pem
  #
{{- end }}
      imagePullSecrets:
        - name: akeyless-docker-hub
      containers:
        - name: {{ .Values.sshConfig.containerName }}
          image: "{{ .Values.sshConfig.image.repository | default "akeyless/zero-trust-bastion" }}:{{ .Values.sshConfig.image.tag | default .Chart.Annotations.ztbVersion }}"
          imagePullPolicy: {{ .Values.sshConfig.image.pullPolicy }}
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
          ports:
          - containerPort: 22
            name: ssh
          - containerPort: 9900
            name: curl-proxy
          env:
          - name: VERSION
            value: {{ .Chart.Annotations.ztbVersion }}
{{- if .Values.clusterName }}
          - name: CLUSTER_NAME
            value: {{ .Values.clusterName }}
{{- end }}
{{- if .Values.legacySigningAlg }}
          - name: LEGACY_SIGNING_ALG
            value: {{ .Values.legacySigningAlg | quote }}
{{- end }}
{{- if .Values.usernameSubClaim }}
          - name: USERNAME_SUB_CLAIM
            value: {{ .Values.usernameSubClaim }}
{{- end }}
{{- if .Values.RDPusernameSubClaim }}
          - name: RDP_USERNAME_SUB_CLAIM
            value: {{ .Values.RDPusernameSubClaim }}
{{- end }}
{{- if .Values.SSHusernameSubClaim }}
          - name: SSH_USERNAME_SUB_CLAIM
            value: {{ .Values.SSHusernameSubClaim }}
{{- end }}
{{- if (eq (include "secret-exist" (dict "Root" $.Values.privilegedAccess.existingSecretNames "Name" "allowedIDs")) "true") }}
          - name: ALLOWED_ACCESS_IDS
            valueFrom:
              secretKeyRef:
                name: {{ .Values.privilegedAccess.existingSecretNames.allowedIDs }}
                key: allowedAccessIDs
  {{- else }}
{{- if .Values.privilegedAccess.allowedAccessIDs }}
          - name: ALLOWED_ACCESS_IDS
            value: {{ range $index, $element := .Values.privilegedAccess.allowedAccessIDs -}}{{- if $index -}},{{- end -}}{{ $element }}{{ end }}
{{- end }}
{{- end }}
{{- if .Values.sshConfig.allowedBastionUrls }}
          - name: ALLOWED_BASTION_URLS
            value: {{ range $index, $element := .Values.sshConfig.allowedBastionUrls -}}{{- if $index -}},{{- end -}}{{ $element }}{{ end }}
{{- end }}
          - name: BASTION_TYPE
            value: "ssh-proxy"
{{- if .Values.httpProxySettings.http_proxy }}
          - name: HTTP_PROXY
            value: {{ .Values.httpProxySettings.http_proxy }}
          - name: http_proxy
            value: {{ .Values.httpProxySettings.http_proxy }}
{{- end }}
{{- if .Values.httpProxySettings.https_proxy }}
          - name: HTTPS_PROXY
            value: {{ .Values.httpProxySettings.https_proxy }}
          - name: https_proxy
            value: {{ .Values.httpProxySettings.https_proxy }}
{{- end }}
{{- if .Values.httpProxySettings.no_proxy }}
          - name: NO_PROXY
            value: {{ .Values.httpProxySettings.no_proxy }}
          - name: no_proxy
            value: {{ .Values.httpProxySettings.no_proxy }}
{{- end }}
{{- if .Values.redisStorage.enabled }}
          - name: USE_CLUSTER_CACHE
            value: "1"
          - name: REDIS_ADDR
            value: {{  include "akeyless-secure-remote-access.fullname" . }}-storage-svc:6379
          - name: REDIS_PASS
            valueFrom:
              secretKeyRef:
                name: {{ include "akeyless-zero-trust-portal.storageSecretName" . }}
                key: storage-pass
{{- end }}
{{- if .Values.sshConfig.env }}
          {{- toYaml .Values.sshConfig.env | nindent 10 }}
{{- end }}
          livenessProbe:
            httpGet:
              path: /status
              port: 9900
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /status
              port: 9900
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
          {{- range .Values.sshConfig.persistence.volumes }}
            - name: {{ .name | title | lower }}
              mountPath: /var/run/requests
              subPath: requests
            - name: {{ .name | title | lower }}
              mountPath: /var/run/akeyless/ssh
              subPath: ssh
          {{- end }}
            - name: config
              mountPath: /var/akeyless/conf
            - name: creds
              mountPath: /var/akeyless/creds
{{- if .Values.apiGatewayCert.tlsCertsSecretName }}
            - name: gw-signed-ca
              mountPath: "/etc/ssl/certs/gw-cert.pem"
              subPath: gw-cert.pem
{{- end }}
          resources:
{{- toYaml .Values.sshConfig.resources | nindent 12 }}
{{- end }}

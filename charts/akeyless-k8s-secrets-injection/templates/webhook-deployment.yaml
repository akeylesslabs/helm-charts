apiVersion: apps/v1
kind: {{ include "deyploymant.type" $ }}
metadata:
  name: {{ template "vault-secrets-webhook.fullname" . }}
  labels:
    app: {{ template "vault-secrets-webhook.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: mutating-webhook
    {{- if .Values.deployment.labels }}
      {{- toYaml .Values.deployment.labels | nindent 4 }}
    {{- end }}
spec:
  {{- if and (eq (include "deyploymant.type" $) "Deployment") (not .Values.HPA.enabled) }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "vault-secrets-webhook.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "vault-secrets-webhook.name" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/apiservice-webhook.yaml") . | sha256sum }}
        {{- if and .Values.metrics.enabled .Values.metrics.promethues.enabled }}
        {{- toYaml .Values.metrics.promethues.annotations | nindent 8 }}
        {{- end }}
    spec:
{{- if .Values.hostNetwork }} 
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
 {{- end }}
      serviceAccountName: {{ template "vault-secrets-webhook.serviceAccountName" . }}
      {{- if .Values.deployment.securityContext }}
      securityContext:
        {{- toYaml .Values.deployment.securityContext | nindent 12 }}
      {{- end }}
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: {{ template "vault-secrets-webhook.fullname" . }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          env:
          - name: TLS_CERT_FILE
            value: /var/serving-cert/tls.crt
          - name: TLS_PRIVATE_KEY_FILE
            value: /var/serving-cert/tls.key
          - name: TLS_SECRET_NAME
            value: {{ include "vault-secrets-webhook.fullname" . }}
          - name: TLS_SECRET_NAMESPACE
            value: {{ .Release.Namespace | quote }}
          - name: INTERNAL_PORT
            value: "{{ .Values.service.internalPort }}"
          - name: SERVICE_NAME
            value: "{{ printf "%s.%s.svc" (include "vault-secrets-webhook.fullname" .) .Release.Namespace }}"
          - name: DEBUG
            value: {{ .Values.debug | quote }}
          {{- if and .Values.metrics.enabled .Values.metrics.promethues.enabled }}
          - name: METRICS_ANNOTATIONS
            value: {{ toJson .Values.metrics.promethues.annotations }}
          {{- end }}
{{- if .Values.gatewayCert.tlsCertsSecretName }}
          - name: AKEYLESS_GW_CERTIFICATE
            valueFrom:
              secretKeyRef:
                name: {{.Values.gatewayCert.tlsCertsSecretName | quote  }}
                key: tls.crt
{{- end }}
{{- if .Values.restartRollout.enabled }}
          - name: RESTART_ROLLOUT
            value: enable
          - name: RESTART_INTERVAL
            value: {{ .Values.restartRollout.interval }}
{{- end }}
          - name: AKEYLESS_AGENT_IMAGE
            value: "{{ .Values.image.agentImage }}:{{ .Values.image.tag | default .Chart.AppVersion  }}"
          {{- range $key, $value := .Values.env }}
          - name: {{ $key }}
            value: {{ $value }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          {{- if .Values.metrics.enabled }}
            - containerPort: {{ .Values.metrics.port }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.internalPort }}
              scheme: HTTPS
{{- toYaml .Values.livenessProbe | trim | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.internalPort }}
              scheme: HTTPS
{{- toYaml .Values.readinessProbe | trim | nindent 12 }}
          volumeMounts:
          - mountPath: /var/serving-cert
            name: serving-cert
{{- if not .Values.openshiftEnabled }}
          securityContext: #//only for k8s - not openshift compatible
            runAsUser: 65534
            allowPrivilegeEscalation: false
{{- if .Values.containerSecurityContext }}
{{- toYaml .Values.containerSecurityContext | nindent 12 }}
{{- end }}
{{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
  {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
  {{- end }}
  {{- if .Values.affinity }}
      affinity:
{{ tpl .Values.affinity . | indent 8 }}
  {{- end }}

{{- if or (not (eq (include "akeyless-api-gw.adminAccessUidExist" .) "")) ( .Values.cachingConf.clusterCache.enabled) }}
{{- $deploymentName := printf "%s-cache" (include "akeyless-api-gw.fullname" .) }}
{{- $mountCertPaths := "/opt/akeyless/cache/certs" -}}
{{- $tlsCertKeyPath := printf "%s/tls.key" $mountCertPaths }}
{{- $tlsCACertPath := printf "%s/ca.crt" $mountCertPaths }}
{{- $tlsCertPath := printf "%s/tls.crt" $mountCertPaths }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    name: {{ $deploymentName }}
    component: cache
{{- include "akeyless-api-gw.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: {{ $deploymentName }}
  template:
    metadata:
      labels:
        name: {{ $deploymentName }}
        component: cache
    spec:
      containers:
      - name: {{ $deploymentName }}
        image: "{{ .Values.cache.image.repository }}:{{ .Values.cache.image.tag }}"
        imagePullPolicy: {{ .Values.cache.image.pullPolicy }}
        #args: ["--requirepass", "$(REDIS_PASSWORD)"]
        ports:
        - containerPort: 6379
          name: cache
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |            
                #!/usr/bin/env bash -e
                export REDISCLI_AUTH="$REDIS_PASSWORD"
                set_response=$(
                  redis-cli set liveness_test_key "SUCCESS"
                )
                response=$(
                  redis-cli get liveness_test_key
                )
                del_response=$(
                    redis-cli del liveness_test_key
                )
                if [ "$response" != "SUCCESS" ] ; then
                  echo "Unable to get keys, something is wrong"
                  echo "$response"
                  exit 1
                fi               
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |            
              #!/usr/bin/env bash -e
              export REDISCLI_AUTH="$REDIS_PASSWORD"
              response=$(
                  redis-cli ping
              )
              if [ "$response" != "PONG" ] ; then
                  echo "Unable to get keys, something is wrong"
                  echo "$response"
                  exit 1
                fi
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.cache.resources | nindent 12 }}
        env:
        - name: REDIS_DISABLE_COMMANDS
          value: "FLUSHDB,FLUSHALL"
        - name: REDIS_EXTRA_FLAGS
          value: "--maxmemory {{ include "akeyless-api-gw.redisMaxmemory" . }} --maxmemory-policy allkeys-lru"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "akeyless-api-gw.cacheSecretName" . }}
              key: cache-pass
        - name: REDIS_TLS_ENABLED
          value: {{ include "cache_enable_tls" . | quote }}
        {{- if (include "cache_enable_tls" . | eq "true") }}
        - name:  REDIS_TLS_CERT_FILE
          value: {{ $tlsCertPath }}
        - name:  REDIS_TLS_KEY_FILE
          value: {{ $tlsCertKeyPath }}
        - name:  REDIS_TLS_CA_FILE
          value: {{ $tlsCACertPath }}
        {{- end }}
        {{- if (include "cache_enable_tls" . | eq "true") }}
        volumeMounts:
            - name: {{ ternary .Values.cache.tls.existingSecretName "redis-certificates" (ne .Values.cache.tls.existingSecretName "") }}
              mountPath: {{ $mountCertPaths }}
              readOnly: true
        {{- end }}
---

apiVersion: v1
kind: Service
metadata:
  name: {{  include "akeyless-api-gw.fullname" . }}-cache-svc
  labels:
{{- include "akeyless-api-gw.labels" . | nindent 4 }}
spec:
  ports:
  - port: 6379
    protocol: TCP
  selector:
    name: {{ $deploymentName }}
  type: ClusterIP
{{- end }}

{{- if ( and .Values.cache .Values.cache.tls .Values.cache.tls.autoGenerated) }}
---
{{- $secretName := printf "%s-crt" (include "akeyless-api-gw.fullname" .) }}
{{- $ca := genCA "redis-ca" 365 }}
{{- $altNames := list "127.0.0.1" "localhost" }}
{{- $cert := genSignedCert "fullname" nil $altNames 365 $ca }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    name: {{ $secretName }}
    component: cache
{{- include "akeyless-api-gw.labels" . | nindent 4 }}
type: kubernetes.io/tls
data:
  tls.crt: {{  $cert.Cert | b64enc }}
  tls.key: {{ $cert.Key | b64enc}}
  ca.crt: {{ $ca.Cert | b64enc}}
{{- end }}
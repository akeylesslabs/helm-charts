{{- if empty .Values.existingSecret  }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-conf-secret
type: Opaque
data:
{{- if .Values.akeylessUserAuth.adminAccessId }}
  admin-access-id: {{ .Values.akeylessUserAuth.adminAccessId | b64enc | quote }}
{{- end }}
{{- if .Values.akeylessUserAuth.adminAccessKey }}
  admin-access-key: {{ .Values.akeylessUserAuth.adminAccessKey | b64enc | quote }}
{{- end  }}
{{- if .Values.akeylessUserAuth.adminPassword }}
  admin-password: {{ .Values.akeylessUserAuth.adminPassword | b64enc | quote }}
{{- end }}
{{- if .Values.akeylessUserAuth.allowedAccessIDs }}
  allowed-access-ids: {{- include  "akeyless-api-gw.allowedAccessIDs" . | b64enc | quote | indent 1 }}
{{- end }}
{{- if .Values.akeylessUserAuth.adminUniversalIdentityToken }}
  admin-uid-token: {{ .Values.akeylessUserAuth.adminUniversalIdentityToken | b64enc | quote }}
{{- end }}
{{- if .Values.customerFragments }}
  customer-fragments: {{ .Values.customerFragments | b64enc | quote }}
{{- end }}
{{- end }}

---
{{- if or (.Values.clusterCache.enabled) (eq (include "akeyless-api-gw.adminAccessUidExist" .) "true") }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-cache-secret
type: Opaque
data:
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "redis-pass") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $redisPassSecret to existing secret data or generate a random one when not exists
  {{- $redisPassSecret := (get $secretData "redis-pass") | default (randAlphaNum 32 | b64enc) }}
  redis-pass: {{ $redisPassSecret | quote }}
{{- end }}


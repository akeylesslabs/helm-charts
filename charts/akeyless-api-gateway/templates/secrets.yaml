{{- if empty .Values.existingSecret  }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-conf-secret
type: Opaque
data:
{{- if .Values.akeylessUserAuth.adminAccessId }}
  admin-access-id: {{ .Values.akeylessUserAuth.adminAccessId | b64enc | quote }}
{{- end }}
{{- if .Values.akeylessUserAuth.adminAccessKey }}
  admin-access-key: {{ .Values.akeylessUserAuth.adminAccessKey | b64enc | quote }}
{{- end  }}
{{- if .Values.akeylessUserAuth.adminPassword }}
  admin-password: {{ .Values.akeylessUserAuth.adminPassword | b64enc | quote }}
{{- end }}
{{- if .Values.akeylessUserAuth.adminBase64Certificate }}
  admin-certificate: {{ .Values.akeylessUserAuth.adminBase64Certificate | b64enc | quote }}
{{- end }}
{{- if .Values.akeylessUserAuth.adminBase64CertificateKey }}
  admin-certificate-key: {{ .Values.akeylessUserAuth.adminBase64CertificateKey | b64enc | quote }}
{{- end }}
{{- if .Values.akeylessUserAuth.allowedAccessIDs }}
  allowed-access-ids: {{- include  "akeyless-api-gw.allowedAccessIDs" . | b64enc | quote | indent 1 }}
{{- end }}
{{- if .Values.akeylessUserAuth.allowedAccessPermissions }}
  allowed-access-permissions: {{ .Values.akeylessUserAuth.allowedAccessPermissions | toJson | b64enc | quote  }}
{{- end }}
{{- if .Values.akeylessUserAuth.adminUIDInitToken }}
  admin-uid-init-token: {{ .Values.akeylessUserAuth.adminUIDInitToken | b64enc | quote }}
{{- end }}
{{- if .Values.customerFragments }}
  customer-fragments: {{ .Values.customerFragments | b64enc | quote }}
{{- else if .Values.customerFragmentsEncoded }}
  customer-fragments: {{ .Values.customerFragmentsEncoded | quote }}
{{- end }}
{{- end }}


---

{{- if .Values.TLSConf.tlsCertificate }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-conf-tls
type: Opaque
data:
  akeyless-api-cert.crt: {{ .Values.TLSConf.tlsCertificate | b64enc | quote }}
  akeyless-api-cert.key: {{ .Values.TLSConf.tlsPrivateKey | b64enc | quote }}
{{- end }}

---

{{- if .Values.logandConf }}
apiVersion: v1
kind: Secret
metadata:
  name: logand-conf
type: Opaque
data:
  logand-conf: {{ .Values.logandConf | b64enc | quote }}
{{- end }}


---
{{- if or (not (eq (include "akeyless-api-gw.adminAccessUidExist" .) "")) ( .Values.cachingConf.clusterCache.enabled) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-cache-secret
type: Opaque
data:
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-cache-secret" $.Release.Name) ) | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  # set $cachePassSecret to existing secret data or generate a random one when not exists
  {{- $cachePassSecret := (get $secretData "cache-pass") | default (randAlphaNum 32 | b64enc) }}
  cache-pass: {{ $cachePassSecret | quote }}
{{- end }}

---
{{- if and (.Values.metrics.enabled) (.Values.metrics.config) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.Release.Name }}-metrics-conf
type: Opaque
data:
  otel-config.yaml: {{ .Values.metrics.config | b64enc | quote }}
{{- end }}
